/*
 * Visier Data and Job Handling APIs
 * Visier APIs for data and job handling
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssignConnectorCredentialRequest;
import com.konfigthis.client.model.AssignConnectorCredentialsResponseDTO;
import com.konfigthis.client.model.CancelJobBatchFromJobIdDTO;
import com.konfigthis.client.model.Connector;
import com.konfigthis.client.model.CredentialCreationAPIResponseDTO;
import com.konfigthis.client.model.DataLoadRequest;
import com.konfigthis.client.model.DataLoadResponse;
import com.konfigthis.client.model.DataProviderAuthInformationDTO;
import com.konfigthis.client.model.DataProviderAuthParamsDTO;
import com.konfigthis.client.model.DataProviderBasicInformationDTO;
import com.konfigthis.client.model.DataProviderBasicMetadataDTO;
import com.konfigthis.client.model.DisableDVModel;
import com.konfigthis.client.model.DisableDVRequest;
import com.konfigthis.client.model.DisableDVResponse;
import com.konfigthis.client.model.DispatchingJobStatusResponse;
import com.konfigthis.client.model.ExcludeDataUploadsRequest;
import com.konfigthis.client.model.ExtractionJobAndStatusResponse;
import com.konfigthis.client.model.ExtractorCredentialsAPIDTO;
import com.konfigthis.client.model.ImportDefinitionsAPIDTO;
import com.konfigthis.client.model.IncludeDataUploadsRequest;
import com.konfigthis.client.model.JobCancellationResultsDTO;
import com.konfigthis.client.model.MapValue;
import com.konfigthis.client.model.MultipleTenantDataVersionsListDTO;
import com.konfigthis.client.model.ProcessingJobAndStatusResponse;
import com.konfigthis.client.model.ProcessingJobStatusResponse;
import com.konfigthis.client.model.ReceivingJobAndStatusResponse;
import com.konfigthis.client.model.ReceivingJobStatusResponse;
import com.konfigthis.client.model.StartExtractionModel;
import com.konfigthis.client.model.StartExtractionRequest;
import com.konfigthis.client.model.StartExtractionResponse;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantDataUploadsListResponseDTO;
import com.konfigthis.client.model.TenantDataUploadsUpdateResponseDTO;
import com.konfigthis.client.model.UploadToExcludeModel;
import com.konfigthis.client.model.UploadToIncludeModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DataAndJobHandlingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataAndJobHandlingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DataAndJobHandlingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call assignConnectorCredentialCall(AssignConnectorCredentialRequest assignConnectorCredentialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assignConnectorCredentialRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data-connectors/assignCredentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignConnectorCredentialValidateBeforeCall(AssignConnectorCredentialRequest assignConnectorCredentialRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assignConnectorCredentialRequest' is set
        if (assignConnectorCredentialRequest == null) {
            throw new ApiException("Missing the required parameter 'assignConnectorCredentialRequest' when calling assignConnectorCredential(Async)");
        }

        return assignConnectorCredentialCall(assignConnectorCredentialRequest, _callback);

    }


    private ApiResponse<AssignConnectorCredentialsResponseDTO> assignConnectorCredentialWithHttpInfo(AssignConnectorCredentialRequest assignConnectorCredentialRequest) throws ApiException {
        okhttp3.Call localVarCall = assignConnectorCredentialValidateBeforeCall(assignConnectorCredentialRequest, null);
        Type localVarReturnType = new TypeToken<AssignConnectorCredentialsResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call assignConnectorCredentialAsync(AssignConnectorCredentialRequest assignConnectorCredentialRequest, final ApiCallback<AssignConnectorCredentialsResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignConnectorCredentialValidateBeforeCall(assignConnectorCredentialRequest, _callback);
        Type localVarReturnType = new TypeToken<AssignConnectorCredentialsResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssignConnectorCredentialRequestBuilder {
        private List<Connector> connectors;

        private AssignConnectorCredentialRequestBuilder() {
        }

        /**
         * Set connectors
         * @param connectors A list of objects representing the data connectors to be assigned with credentials. (optional)
         * @return AssignConnectorCredentialRequestBuilder
         */
        public AssignConnectorCredentialRequestBuilder connectors(List<Connector> connectors) {
            this.connectors = connectors;
            return this;
        }
        
        /**
         * Build call for assignConnectorCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AssignConnectorCredentialRequest assignConnectorCredentialRequest = buildBodyParams();
            return assignConnectorCredentialCall(assignConnectorCredentialRequest, _callback);
        }

        private AssignConnectorCredentialRequest buildBodyParams() {
            AssignConnectorCredentialRequest assignConnectorCredentialRequest = new AssignConnectorCredentialRequest();
            assignConnectorCredentialRequest.connectors(this.connectors);
            return assignConnectorCredentialRequest;
        }

        /**
         * Execute assignConnectorCredential request
         * @return AssignConnectorCredentialsResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public AssignConnectorCredentialsResponseDTO execute() throws ApiException {
            AssignConnectorCredentialRequest assignConnectorCredentialRequest = buildBodyParams();
            ApiResponse<AssignConnectorCredentialsResponseDTO> localVarResp = assignConnectorCredentialWithHttpInfo(assignConnectorCredentialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute assignConnectorCredential request with HTTP info returned
         * @return ApiResponse&lt;AssignConnectorCredentialsResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssignConnectorCredentialsResponseDTO> executeWithHttpInfo() throws ApiException {
            AssignConnectorCredentialRequest assignConnectorCredentialRequest = buildBodyParams();
            return assignConnectorCredentialWithHttpInfo(assignConnectorCredentialRequest);
        }

        /**
         * Execute assignConnectorCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssignConnectorCredentialsResponseDTO> _callback) throws ApiException {
            AssignConnectorCredentialRequest assignConnectorCredentialRequest = buildBodyParams();
            return assignConnectorCredentialAsync(assignConnectorCredentialRequest, _callback);
        }
    }

    /**
     * Assign connector credentials to data connectors
     * This API allows you to assign a connector credential to a data connector.
     * @param assignConnectorCredentialRequest  (required)
     * @return AssignConnectorCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public AssignConnectorCredentialRequestBuilder assignConnectorCredential() throws IllegalArgumentException {
        return new AssignConnectorCredentialRequestBuilder();
    }
    private okhttp3.Call cancelJobsCall(CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelJobBatchFromJobIdDTO;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelJobsValidateBeforeCall(CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cancelJobBatchFromJobIdDTO' is set
        if (cancelJobBatchFromJobIdDTO == null) {
            throw new ApiException("Missing the required parameter 'cancelJobBatchFromJobIdDTO' when calling cancelJobs(Async)");
        }

        return cancelJobsCall(cancelJobBatchFromJobIdDTO, _callback);

    }


    private ApiResponse<JobCancellationResultsDTO> cancelJobsWithHttpInfo(CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO) throws ApiException {
        okhttp3.Call localVarCall = cancelJobsValidateBeforeCall(cancelJobBatchFromJobIdDTO, null);
        Type localVarReturnType = new TypeToken<JobCancellationResultsDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelJobsAsync(CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO, final ApiCallback<JobCancellationResultsDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelJobsValidateBeforeCall(cancelJobBatchFromJobIdDTO, _callback);
        Type localVarReturnType = new TypeToken<JobCancellationResultsDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelJobsRequestBuilder {
        private List<String> jobIds;

        private CancelJobsRequestBuilder() {
        }

        /**
         * Set jobIds
         * @param jobIds A list of jobs to cancel. The maximum number of jobs that can be cancelled is 500. (optional)
         * @return CancelJobsRequestBuilder
         */
        public CancelJobsRequestBuilder jobIds(List<String> jobIds) {
            this.jobIds = jobIds;
            return this;
        }
        
        /**
         * Build call for cancelJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO = buildBodyParams();
            return cancelJobsCall(cancelJobBatchFromJobIdDTO, _callback);
        }

        private CancelJobBatchFromJobIdDTO buildBodyParams() {
            CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO = new CancelJobBatchFromJobIdDTO();
            cancelJobBatchFromJobIdDTO.jobIds(this.jobIds);
            return cancelJobBatchFromJobIdDTO;
        }

        /**
         * Execute cancelJobs request
         * @return JobCancellationResultsDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public JobCancellationResultsDTO execute() throws ApiException {
            CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO = buildBodyParams();
            ApiResponse<JobCancellationResultsDTO> localVarResp = cancelJobsWithHttpInfo(cancelJobBatchFromJobIdDTO);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelJobs request with HTTP info returned
         * @return ApiResponse&lt;JobCancellationResultsDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JobCancellationResultsDTO> executeWithHttpInfo() throws ApiException {
            CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO = buildBodyParams();
            return cancelJobsWithHttpInfo(cancelJobBatchFromJobIdDTO);
        }

        /**
         * Execute cancelJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JobCancellationResultsDTO> _callback) throws ApiException {
            CancelJobBatchFromJobIdDTO cancelJobBatchFromJobIdDTO = buildBodyParams();
            return cancelJobsAsync(cancelJobBatchFromJobIdDTO, _callback);
        }
    }

    /**
     * Cancel a list of jobs
     * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
     * @param cancelJobBatchFromJobIdDTO  (required)
     * @return CancelJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CancelJobsRequestBuilder cancelJobs() throws IllegalArgumentException {
        return new CancelJobsRequestBuilder();
    }
    private okhttp3.Call createConnectorCredentialCall(DataProviderAuthInformationDTO dataProviderAuthInformationDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataProviderAuthInformationDTO;

        // create path and map variables
        String localVarPath = "/v1/op/data-connector-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorCredentialValidateBeforeCall(DataProviderAuthInformationDTO dataProviderAuthInformationDTO, String tenantCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataProviderAuthInformationDTO' is set
        if (dataProviderAuthInformationDTO == null) {
            throw new ApiException("Missing the required parameter 'dataProviderAuthInformationDTO' when calling createConnectorCredential(Async)");
        }

        return createConnectorCredentialCall(dataProviderAuthInformationDTO, tenantCode, _callback);

    }


    private ApiResponse<CredentialCreationAPIResponseDTO> createConnectorCredentialWithHttpInfo(DataProviderAuthInformationDTO dataProviderAuthInformationDTO, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = createConnectorCredentialValidateBeforeCall(dataProviderAuthInformationDTO, tenantCode, null);
        Type localVarReturnType = new TypeToken<CredentialCreationAPIResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorCredentialAsync(DataProviderAuthInformationDTO dataProviderAuthInformationDTO, String tenantCode, final ApiCallback<CredentialCreationAPIResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorCredentialValidateBeforeCall(dataProviderAuthInformationDTO, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<CredentialCreationAPIResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateConnectorCredentialRequestBuilder {
        private DataProviderAuthParamsDTO dataProviderAuthParams;
        private DataProviderBasicInformationDTO dataProviderBasicInformation;
        private DataProviderBasicMetadataDTO dataProviderMetadata;
        private String tenantCode;

        private CreateConnectorCredentialRequestBuilder() {
        }

        /**
         * Set dataProviderAuthParams
         * @param dataProviderAuthParams The authentication information for the credential. (optional)
         * @return CreateConnectorCredentialRequestBuilder
         */
        public CreateConnectorCredentialRequestBuilder dataProviderAuthParams(DataProviderAuthParamsDTO dataProviderAuthParams) {
            this.dataProviderAuthParams = dataProviderAuthParams;
            return this;
        }
        
        /**
         * Set dataProviderBasicInformation
         * @param dataProviderBasicInformation The display name and description for the credential. (optional)
         * @return CreateConnectorCredentialRequestBuilder
         */
        public CreateConnectorCredentialRequestBuilder dataProviderBasicInformation(DataProviderBasicInformationDTO dataProviderBasicInformation) {
            this.dataProviderBasicInformation = dataProviderBasicInformation;
            return this;
        }
        
        /**
         * Set dataProviderMetadata
         * @param dataProviderMetadata  (optional)
         * @return CreateConnectorCredentialRequestBuilder
         */
        public CreateConnectorCredentialRequestBuilder dataProviderMetadata(DataProviderBasicMetadataDTO dataProviderMetadata) {
            this.dataProviderMetadata = dataProviderMetadata;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to create the credential for. (optional)
         * @return CreateConnectorCredentialRequestBuilder
         */
        public CreateConnectorCredentialRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for createConnectorCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataProviderAuthInformationDTO dataProviderAuthInformationDTO = buildBodyParams();
            return createConnectorCredentialCall(dataProviderAuthInformationDTO, tenantCode, _callback);
        }

        private DataProviderAuthInformationDTO buildBodyParams() {
            DataProviderAuthInformationDTO dataProviderAuthInformationDTO = new DataProviderAuthInformationDTO();
            dataProviderAuthInformationDTO.dataProviderAuthParams(this.dataProviderAuthParams);
            dataProviderAuthInformationDTO.dataProviderBasicInformation(this.dataProviderBasicInformation);
            dataProviderAuthInformationDTO.dataProviderMetadata(this.dataProviderMetadata);
            return dataProviderAuthInformationDTO;
        }

        /**
         * Execute createConnectorCredential request
         * @return CredentialCreationAPIResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public CredentialCreationAPIResponseDTO execute() throws ApiException {
            DataProviderAuthInformationDTO dataProviderAuthInformationDTO = buildBodyParams();
            ApiResponse<CredentialCreationAPIResponseDTO> localVarResp = createConnectorCredentialWithHttpInfo(dataProviderAuthInformationDTO, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createConnectorCredential request with HTTP info returned
         * @return ApiResponse&lt;CredentialCreationAPIResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CredentialCreationAPIResponseDTO> executeWithHttpInfo() throws ApiException {
            DataProviderAuthInformationDTO dataProviderAuthInformationDTO = buildBodyParams();
            return createConnectorCredentialWithHttpInfo(dataProviderAuthInformationDTO, tenantCode);
        }

        /**
         * Execute createConnectorCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CredentialCreationAPIResponseDTO> _callback) throws ApiException {
            DataProviderAuthInformationDTO dataProviderAuthInformationDTO = buildBodyParams();
            return createConnectorCredentialAsync(dataProviderAuthInformationDTO, tenantCode, _callback);
        }
    }

    /**
     * Create a connector credential
     * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
     * @param dataProviderAuthInformationDTO  (required)
     * @return CreateConnectorCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public CreateConnectorCredentialRequestBuilder createConnectorCredential() throws IllegalArgumentException {
        return new CreateConnectorCredentialRequestBuilder();
    }
    private okhttp3.Call dataConnectorCredentialsCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-connector-credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectorCredentialsValidateBeforeCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return dataConnectorCredentialsCall(tenantCode, limit, start, _callback);

    }


    private ApiResponse<ExtractorCredentialsAPIDTO> dataConnectorCredentialsWithHttpInfo(String tenantCode, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = dataConnectorCredentialsValidateBeforeCall(tenantCode, limit, start, null);
        Type localVarReturnType = new TypeToken<ExtractorCredentialsAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call dataConnectorCredentialsAsync(String tenantCode, Integer limit, Integer start, final ApiCallback<ExtractorCredentialsAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectorCredentialsValidateBeforeCall(tenantCode, limit, start, _callback);
        Type localVarReturnType = new TypeToken<ExtractorCredentialsAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DataConnectorCredentialsRequestBuilder {
        private String tenantCode;
        private Integer limit;
        private Integer start;

        private DataConnectorCredentialsRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve for. (optional)
         * @return DataConnectorCredentialsRequestBuilder
         */
        public DataConnectorCredentialsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit to retrieve. (optional)
         * @return DataConnectorCredentialsRequestBuilder
         */
        public DataConnectorCredentialsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return DataConnectorCredentialsRequestBuilder
         */
        public DataConnectorCredentialsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for dataConnectorCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dataConnectorCredentialsCall(tenantCode, limit, start, _callback);
        }


        /**
         * Execute dataConnectorCredentials request
         * @return ExtractorCredentialsAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ExtractorCredentialsAPIDTO execute() throws ApiException {
            ApiResponse<ExtractorCredentialsAPIDTO> localVarResp = dataConnectorCredentialsWithHttpInfo(tenantCode, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute dataConnectorCredentials request with HTTP info returned
         * @return ApiResponse&lt;ExtractorCredentialsAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExtractorCredentialsAPIDTO> executeWithHttpInfo() throws ApiException {
            return dataConnectorCredentialsWithHttpInfo(tenantCode, limit, start);
        }

        /**
         * Execute dataConnectorCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExtractorCredentialsAPIDTO> _callback) throws ApiException {
            return dataConnectorCredentialsAsync(tenantCode, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all data connector credentials
     * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
     * @return DataConnectorCredentialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DataConnectorCredentialsRequestBuilder dataConnectorCredentials() throws IllegalArgumentException {
        return new DataConnectorCredentialsRequestBuilder();
    }
    private okhttp3.Call dataConnectorsCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataConnectorsValidateBeforeCall(String tenantCode, Integer limit, Integer start, final ApiCallback _callback) throws ApiException {
        return dataConnectorsCall(tenantCode, limit, start, _callback);

    }


    private ApiResponse<ImportDefinitionsAPIDTO> dataConnectorsWithHttpInfo(String tenantCode, Integer limit, Integer start) throws ApiException {
        okhttp3.Call localVarCall = dataConnectorsValidateBeforeCall(tenantCode, limit, start, null);
        Type localVarReturnType = new TypeToken<ImportDefinitionsAPIDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call dataConnectorsAsync(String tenantCode, Integer limit, Integer start, final ApiCallback<ImportDefinitionsAPIDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataConnectorsValidateBeforeCall(tenantCode, limit, start, _callback);
        Type localVarReturnType = new TypeToken<ImportDefinitionsAPIDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DataConnectorsRequestBuilder {
        private String tenantCode;
        private Integer limit;
        private Integer start;

        private DataConnectorsRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve for. (optional)
         * @return DataConnectorsRequestBuilder
         */
        public DataConnectorsRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit to retrieve. (optional)
         * @return DataConnectorsRequestBuilder
         */
        public DataConnectorsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return DataConnectorsRequestBuilder
         */
        public DataConnectorsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Build call for dataConnectors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dataConnectorsCall(tenantCode, limit, start, _callback);
        }


        /**
         * Execute dataConnectors request
         * @return ImportDefinitionsAPIDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ImportDefinitionsAPIDTO execute() throws ApiException {
            ApiResponse<ImportDefinitionsAPIDTO> localVarResp = dataConnectorsWithHttpInfo(tenantCode, limit, start);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute dataConnectors request with HTTP info returned
         * @return ApiResponse&lt;ImportDefinitionsAPIDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImportDefinitionsAPIDTO> executeWithHttpInfo() throws ApiException {
            return dataConnectorsWithHttpInfo(tenantCode, limit, start);
        }

        /**
         * Execute dataConnectors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImportDefinitionsAPIDTO> _callback) throws ApiException {
            return dataConnectorsAsync(tenantCode, limit, start, _callback);
        }
    }

    /**
     * Retrieve a list of all data connectors
     * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
     * @return DataConnectorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DataConnectorsRequestBuilder dataConnectors() throws IllegalArgumentException {
        return new DataConnectorsRequestBuilder();
    }
    private okhttp3.Call deleteConnectorCredentialCall(String id, String tenantCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-connector-credentials/:id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectorCredentialValidateBeforeCall(String id, String tenantCode, final ApiCallback _callback) throws ApiException {
        return deleteConnectorCredentialCall(id, tenantCode, _callback);

    }


    private ApiResponse<String> deleteConnectorCredentialWithHttpInfo(String id, String tenantCode) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectorCredentialValidateBeforeCall(id, tenantCode, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteConnectorCredentialAsync(String id, String tenantCode, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectorCredentialValidateBeforeCall(id, tenantCode, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteConnectorCredentialRequestBuilder {
        private String id;
        private String tenantCode;

        private DeleteConnectorCredentialRequestBuilder() {
        }

        /**
         * Set id
         * @param id The credentialId of the credential you want to delete. (optional)
         * @return DeleteConnectorCredentialRequestBuilder
         */
        public DeleteConnectorCredentialRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of the analytic tenant in which the credential you&#39;re deleting. (optional)
         * @return DeleteConnectorCredentialRequestBuilder
         */
        public DeleteConnectorCredentialRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Build call for deleteConnectorCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConnectorCredentialCall(id, tenantCode, _callback);
        }


        /**
         * Execute deleteConnectorCredential request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deleteConnectorCredentialWithHttpInfo(id, tenantCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteConnectorCredential request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deleteConnectorCredentialWithHttpInfo(id, tenantCode);
        }

        /**
         * Execute deleteConnectorCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deleteConnectorCredentialAsync(id, tenantCode, _callback);
        }
    }

    /**
     * Delete a connector credential
     * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
     * @return DeleteConnectorCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteConnectorCredentialRequestBuilder deleteConnectorCredential() throws IllegalArgumentException {
        return new DeleteConnectorCredentialRequestBuilder();
    }
    private okhttp3.Call disableDVCall(DisableDVRequest disableDVRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableDVRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data-versions/disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableDVValidateBeforeCall(DisableDVRequest disableDVRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'disableDVRequest' is set
        if (disableDVRequest == null) {
            throw new ApiException("Missing the required parameter 'disableDVRequest' when calling disableDV(Async)");
        }

        return disableDVCall(disableDVRequest, _callback);

    }


    private ApiResponse<DisableDVResponse> disableDVWithHttpInfo(DisableDVRequest disableDVRequest) throws ApiException {
        okhttp3.Call localVarCall = disableDVValidateBeforeCall(disableDVRequest, null);
        Type localVarReturnType = new TypeToken<DisableDVResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableDVAsync(DisableDVRequest disableDVRequest, final ApiCallback<DisableDVResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableDVValidateBeforeCall(disableDVRequest, _callback);
        Type localVarReturnType = new TypeToken<DisableDVResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisableDVRequestBuilder {
        private DisableDVModel model;

        private DisableDVRequestBuilder() {
        }

        /**
         * Set model
         * @param model A form body key that contains a collection of key-value pairs. (optional)
         * @return DisableDVRequestBuilder
         */
        public DisableDVRequestBuilder model(DisableDVModel model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for disableDV
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DisableDVRequest disableDVRequest = buildBodyParams();
            return disableDVCall(disableDVRequest, _callback);
        }

        private DisableDVRequest buildBodyParams() {
            DisableDVRequest disableDVRequest = new DisableDVRequest();
            disableDVRequest.model(this.model);
            return disableDVRequest;
        }

        /**
         * Execute disableDV request
         * @return DisableDVResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public DisableDVResponse execute() throws ApiException {
            DisableDVRequest disableDVRequest = buildBodyParams();
            ApiResponse<DisableDVResponse> localVarResp = disableDVWithHttpInfo(disableDVRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disableDV request with HTTP info returned
         * @return ApiResponse&lt;DisableDVResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DisableDVResponse> executeWithHttpInfo() throws ApiException {
            DisableDVRequest disableDVRequest = buildBodyParams();
            return disableDVWithHttpInfo(disableDVRequest);
        }

        /**
         * Execute disableDV request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DisableDVResponse> _callback) throws ApiException {
            DisableDVRequest disableDVRequest = buildBodyParams();
            return disableDVAsync(disableDVRequest, _callback);
        }
    }

    /**
     * Disable data versions for a list of analytic tenants
     * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
     * @param disableDVRequest  (required)
     * @return DisableDVRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DisableDVRequestBuilder disableDV() throws IllegalArgumentException {
        return new DisableDVRequestBuilder();
    }
    private okhttp3.Call dispatchingJobStatusCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/dispatching-jobs/:jobId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dispatchingJobStatusValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        return dispatchingJobStatusCall(jobId, _callback);

    }


    private ApiResponse<DispatchingJobStatusResponse> dispatchingJobStatusWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = dispatchingJobStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<DispatchingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call dispatchingJobStatusAsync(String jobId, final ApiCallback<DispatchingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dispatchingJobStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<DispatchingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DispatchingJobStatusRequestBuilder {
        private String jobId;

        private DispatchingJobStatusRequestBuilder() {
        }

        /**
         * Set jobId
         * @param jobId The ID of the job you want to retrieve. (optional)
         * @return DispatchingJobStatusRequestBuilder
         */
        public DispatchingJobStatusRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for dispatchingJobStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return dispatchingJobStatusCall(jobId, _callback);
        }


        /**
         * Execute dispatchingJobStatus request
         * @return DispatchingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public DispatchingJobStatusResponse execute() throws ApiException {
            ApiResponse<DispatchingJobStatusResponse> localVarResp = dispatchingJobStatusWithHttpInfo(jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute dispatchingJobStatus request with HTTP info returned
         * @return ApiResponse&lt;DispatchingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DispatchingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return dispatchingJobStatusWithHttpInfo(jobId);
        }

        /**
         * Execute dispatchingJobStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DispatchingJobStatusResponse> _callback) throws ApiException {
            return dispatchingJobStatusAsync(jobId, _callback);
        }
    }

    /**
     * Retrieve a dispatching job&#39;s status
     * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
     * @return DispatchingJobStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public DispatchingJobStatusRequestBuilder dispatchingJobStatus() throws IllegalArgumentException {
        return new DispatchingJobStatusRequestBuilder();
    }
    private okhttp3.Call excludeDataUplaodsCall(ExcludeDataUploadsRequest excludeDataUploadsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = excludeDataUploadsRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data/uploads/exclude";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call excludeDataUplaodsValidateBeforeCall(ExcludeDataUploadsRequest excludeDataUploadsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'excludeDataUploadsRequest' is set
        if (excludeDataUploadsRequest == null) {
            throw new ApiException("Missing the required parameter 'excludeDataUploadsRequest' when calling excludeDataUplaods(Async)");
        }

        return excludeDataUplaodsCall(excludeDataUploadsRequest, _callback);

    }


    private ApiResponse<TenantDataUploadsUpdateResponseDTO> excludeDataUplaodsWithHttpInfo(ExcludeDataUploadsRequest excludeDataUploadsRequest) throws ApiException {
        okhttp3.Call localVarCall = excludeDataUplaodsValidateBeforeCall(excludeDataUploadsRequest, null);
        Type localVarReturnType = new TypeToken<TenantDataUploadsUpdateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call excludeDataUplaodsAsync(ExcludeDataUploadsRequest excludeDataUploadsRequest, final ApiCallback<TenantDataUploadsUpdateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = excludeDataUplaodsValidateBeforeCall(excludeDataUploadsRequest, _callback);
        Type localVarReturnType = new TypeToken<TenantDataUploadsUpdateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExcludeDataUplaodsRequestBuilder {
        private UploadToExcludeModel model;

        private ExcludeDataUplaodsRequestBuilder() {
        }

        /**
         * Set model
         * @param model A form body key that contains a collection of key-value pairs. (optional)
         * @return ExcludeDataUplaodsRequestBuilder
         */
        public ExcludeDataUplaodsRequestBuilder model(UploadToExcludeModel model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for excludeDataUplaods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExcludeDataUploadsRequest excludeDataUploadsRequest = buildBodyParams();
            return excludeDataUplaodsCall(excludeDataUploadsRequest, _callback);
        }

        private ExcludeDataUploadsRequest buildBodyParams() {
            ExcludeDataUploadsRequest excludeDataUploadsRequest = new ExcludeDataUploadsRequest();
            excludeDataUploadsRequest.model(this.model);
            return excludeDataUploadsRequest;
        }

        /**
         * Execute excludeDataUplaods request
         * @return TenantDataUploadsUpdateResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantDataUploadsUpdateResponseDTO execute() throws ApiException {
            ExcludeDataUploadsRequest excludeDataUploadsRequest = buildBodyParams();
            ApiResponse<TenantDataUploadsUpdateResponseDTO> localVarResp = excludeDataUplaodsWithHttpInfo(excludeDataUploadsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute excludeDataUplaods request with HTTP info returned
         * @return ApiResponse&lt;TenantDataUploadsUpdateResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantDataUploadsUpdateResponseDTO> executeWithHttpInfo() throws ApiException {
            ExcludeDataUploadsRequest excludeDataUploadsRequest = buildBodyParams();
            return excludeDataUplaodsWithHttpInfo(excludeDataUploadsRequest);
        }

        /**
         * Execute excludeDataUplaods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantDataUploadsUpdateResponseDTO> _callback) throws ApiException {
            ExcludeDataUploadsRequest excludeDataUploadsRequest = buildBodyParams();
            return excludeDataUplaodsAsync(excludeDataUploadsRequest, _callback);
        }
    }

    /**
     * Exclude data uploads
     * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
     * @param excludeDataUploadsRequest  (required)
     * @return ExcludeDataUplaodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ExcludeDataUplaodsRequestBuilder excludeDataUplaods() throws IllegalArgumentException {
        return new ExcludeDataUplaodsRequestBuilder();
    }
    private okhttp3.Call extractionJobAndStatusCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/dispatching-jobs/:jobId/extraction-jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dispatchingJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dispatchingJobId", dispatchingJobId));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractionJobAndStatusValidateBeforeCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        return extractionJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);

    }


    private ApiResponse<ExtractionJobAndStatusResponse> extractionJobAndStatusWithHttpInfo(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId) throws ApiException {
        okhttp3.Call localVarCall = extractionJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, null);
        Type localVarReturnType = new TypeToken<ExtractionJobAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call extractionJobAndStatusAsync(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback<ExtractionJobAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractionJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        Type localVarReturnType = new TypeToken<ExtractionJobAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExtractionJobAndStatusRequestBuilder {
        private String dispatchingJobId;
        private String tenantCode;
        private Integer limit;
        private Integer start;
        private String jobId;

        private ExtractionJobAndStatusRequestBuilder() {
        }

        /**
         * Set dispatchingJobId
         * @param dispatchingJobId The ID of the dispatching job that generated the extraction jobs. (optional)
         * @return ExtractionJobAndStatusRequestBuilder
         */
        public ExtractionJobAndStatusRequestBuilder dispatchingJobId(String dispatchingJobId) {
            this.dispatchingJobId = dispatchingJobId;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return ExtractionJobAndStatusRequestBuilder
         */
        public ExtractionJobAndStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of extraction job statuses to retrieve. (optional)
         * @return ExtractionJobAndStatusRequestBuilder
         */
        public ExtractionJobAndStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ExtractionJobAndStatusRequestBuilder
         */
        public ExtractionJobAndStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId The ID of the dispatching job you want to retrieve. (optional)
         * @return ExtractionJobAndStatusRequestBuilder
         */
        public ExtractionJobAndStatusRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for extractionJobAndStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return extractionJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }


        /**
         * Execute extractionJobAndStatus request
         * @return ExtractionJobAndStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ExtractionJobAndStatusResponse execute() throws ApiException {
            ApiResponse<ExtractionJobAndStatusResponse> localVarResp = extractionJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute extractionJobAndStatus request with HTTP info returned
         * @return ApiResponse&lt;ExtractionJobAndStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExtractionJobAndStatusResponse> executeWithHttpInfo() throws ApiException {
            return extractionJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
        }

        /**
         * Execute extractionJobAndStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExtractionJobAndStatusResponse> _callback) throws ApiException {
            return extractionJobAndStatusAsync(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }
    }

    /**
     * Retrieve a dispatching job&#39;s extraction jobs with their statuses
     * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which retrieve data from your source systems through data connectors.
     * @return ExtractionJobAndStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ExtractionJobAndStatusRequestBuilder extractionJobAndStatus() throws IllegalArgumentException {
        return new ExtractionJobAndStatusRequestBuilder();
    }
    private okhttp3.Call includeDataUploadsCall(IncludeDataUploadsRequest includeDataUploadsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = includeDataUploadsRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data/uploads/include";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call includeDataUploadsValidateBeforeCall(IncludeDataUploadsRequest includeDataUploadsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'includeDataUploadsRequest' is set
        if (includeDataUploadsRequest == null) {
            throw new ApiException("Missing the required parameter 'includeDataUploadsRequest' when calling includeDataUploads(Async)");
        }

        return includeDataUploadsCall(includeDataUploadsRequest, _callback);

    }


    private ApiResponse<TenantDataUploadsUpdateResponseDTO> includeDataUploadsWithHttpInfo(IncludeDataUploadsRequest includeDataUploadsRequest) throws ApiException {
        okhttp3.Call localVarCall = includeDataUploadsValidateBeforeCall(includeDataUploadsRequest, null);
        Type localVarReturnType = new TypeToken<TenantDataUploadsUpdateResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call includeDataUploadsAsync(IncludeDataUploadsRequest includeDataUploadsRequest, final ApiCallback<TenantDataUploadsUpdateResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = includeDataUploadsValidateBeforeCall(includeDataUploadsRequest, _callback);
        Type localVarReturnType = new TypeToken<TenantDataUploadsUpdateResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IncludeDataUploadsRequestBuilder {
        private UploadToIncludeModel model;

        private IncludeDataUploadsRequestBuilder() {
        }

        /**
         * Set model
         * @param model A form body key that contains a collection of key-value pairs. (optional)
         * @return IncludeDataUploadsRequestBuilder
         */
        public IncludeDataUploadsRequestBuilder model(UploadToIncludeModel model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for includeDataUploads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IncludeDataUploadsRequest includeDataUploadsRequest = buildBodyParams();
            return includeDataUploadsCall(includeDataUploadsRequest, _callback);
        }

        private IncludeDataUploadsRequest buildBodyParams() {
            IncludeDataUploadsRequest includeDataUploadsRequest = new IncludeDataUploadsRequest();
            includeDataUploadsRequest.model(this.model);
            return includeDataUploadsRequest;
        }

        /**
         * Execute includeDataUploads request
         * @return TenantDataUploadsUpdateResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantDataUploadsUpdateResponseDTO execute() throws ApiException {
            IncludeDataUploadsRequest includeDataUploadsRequest = buildBodyParams();
            ApiResponse<TenantDataUploadsUpdateResponseDTO> localVarResp = includeDataUploadsWithHttpInfo(includeDataUploadsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute includeDataUploads request with HTTP info returned
         * @return ApiResponse&lt;TenantDataUploadsUpdateResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantDataUploadsUpdateResponseDTO> executeWithHttpInfo() throws ApiException {
            IncludeDataUploadsRequest includeDataUploadsRequest = buildBodyParams();
            return includeDataUploadsWithHttpInfo(includeDataUploadsRequest);
        }

        /**
         * Execute includeDataUploads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantDataUploadsUpdateResponseDTO> _callback) throws ApiException {
            IncludeDataUploadsRequest includeDataUploadsRequest = buildBodyParams();
            return includeDataUploadsAsync(includeDataUploadsRequest, _callback);
        }
    }

    /**
     * Include data uploads
     * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
     * @param includeDataUploadsRequest  (required)
     * @return IncludeDataUploadsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public IncludeDataUploadsRequestBuilder includeDataUploads() throws IllegalArgumentException {
        return new IncludeDataUploadsRequestBuilder();
    }
    private okhttp3.Call jobIdStatusCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/job-status/jobs/:jobId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobIdStatusValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        return jobIdStatusCall(jobId, _callback);

    }


    private ApiResponse<ReceivingJobStatusResponse> jobIdStatusWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobIdStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call jobIdStatusAsync(String jobId, final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobIdStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JobIdStatusRequestBuilder {
        private String jobId;

        private JobIdStatusRequestBuilder() {
        }

        /**
         * Set jobId
         * @param jobId The unique ID of the job to retrieve the status for. (optional)
         * @return JobIdStatusRequestBuilder
         */
        public JobIdStatusRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for jobIdStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return jobIdStatusCall(jobId, _callback);
        }


        /**
         * Execute jobIdStatus request
         * @return ReceivingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ReceivingJobStatusResponse execute() throws ApiException {
            ApiResponse<ReceivingJobStatusResponse> localVarResp = jobIdStatusWithHttpInfo(jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute jobIdStatus request with HTTP info returned
         * @return ApiResponse&lt;ReceivingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceivingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return jobIdStatusWithHttpInfo(jobId);
        }

        /**
         * Execute jobIdStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {
            return jobIdStatusAsync(jobId, _callback);
        }
    }

    /**
     * Retrieve a specific job&#39;s status
     * Use this API to retrieve the list of statuses for a specific job with id &#x60;jobId&#x60;.
     * @return JobIdStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public JobIdStatusRequestBuilder jobIdStatus() throws IllegalArgumentException {
        return new JobIdStatusRequestBuilder();
    }
    private okhttp3.Call jobStatusCall(String startTime, String endTime, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/job-status/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobStatusValidateBeforeCall(String startTime, String endTime, String status, final ApiCallback _callback) throws ApiException {
        return jobStatusCall(startTime, endTime, status, _callback);

    }


    private ApiResponse<ReceivingJobStatusResponse> jobStatusWithHttpInfo(String startTime, String endTime, String status) throws ApiException {
        okhttp3.Call localVarCall = jobStatusValidateBeforeCall(startTime, endTime, status, null);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call jobStatusAsync(String startTime, String endTime, String status, final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobStatusValidateBeforeCall(startTime, endTime, status, _callback);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class JobStatusRequestBuilder {
        private String startTime;
        private String endTime;
        private String status;

        private JobStatusRequestBuilder() {
        }

        /**
         * Set startTime
         * @param startTime The start time from which to retrieve job statuses. (optional)
         * @return JobStatusRequestBuilder
         */
        public JobStatusRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime The end time from which to retrieve job statuses. (optional)
         * @return JobStatusRequestBuilder
         */
        public JobStatusRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set status
         * @param status The specific status to restrict the list of job to. (optional)
         * @return JobStatusRequestBuilder
         */
        public JobStatusRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for jobStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return jobStatusCall(startTime, endTime, status, _callback);
        }


        /**
         * Execute jobStatus request
         * @return ReceivingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ReceivingJobStatusResponse execute() throws ApiException {
            ApiResponse<ReceivingJobStatusResponse> localVarResp = jobStatusWithHttpInfo(startTime, endTime, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute jobStatus request with HTTP info returned
         * @return ApiResponse&lt;ReceivingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceivingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return jobStatusWithHttpInfo(startTime, endTime, status);
        }

        /**
         * Execute jobStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {
            return jobStatusAsync(startTime, endTime, status, _callback);
        }
    }

    /**
     * Retrieve the statuses of all jobs
     * Use this API to retrieve the list of statuses for all jobs.
     * @return JobStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public JobStatusRequestBuilder jobStatus() throws IllegalArgumentException {
        return new JobStatusRequestBuilder();
    }
    private okhttp3.Call latestEnabledDVCall(String tenantCode, Integer limit, Integer start, Integer numberOfVersions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data-versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (numberOfVersions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfVersions", numberOfVersions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestEnabledDVValidateBeforeCall(String tenantCode, Integer limit, Integer start, Integer numberOfVersions, final ApiCallback _callback) throws ApiException {
        return latestEnabledDVCall(tenantCode, limit, start, numberOfVersions, _callback);

    }


    private ApiResponse<MultipleTenantDataVersionsListDTO> latestEnabledDVWithHttpInfo(String tenantCode, Integer limit, Integer start, Integer numberOfVersions) throws ApiException {
        okhttp3.Call localVarCall = latestEnabledDVValidateBeforeCall(tenantCode, limit, start, numberOfVersions, null);
        Type localVarReturnType = new TypeToken<MultipleTenantDataVersionsListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call latestEnabledDVAsync(String tenantCode, Integer limit, Integer start, Integer numberOfVersions, final ApiCallback<MultipleTenantDataVersionsListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestEnabledDVValidateBeforeCall(tenantCode, limit, start, numberOfVersions, _callback);
        Type localVarReturnType = new TypeToken<MultipleTenantDataVersionsListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LatestEnabledDVRequestBuilder {
        private String tenantCode;
        private Integer limit;
        private Integer start;
        private Integer numberOfVersions;

        private LatestEnabledDVRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve data versions for.  Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return LatestEnabledDVRequestBuilder
         */
        public LatestEnabledDVRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of analytic tenants to retrieve data versions for.  This parameter is not used if the tenantCode parameter is specified. (optional)
         * @return LatestEnabledDVRequestBuilder
         */
        public LatestEnabledDVRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return LatestEnabledDVRequestBuilder
         */
        public LatestEnabledDVRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set numberOfVersions
         * @param numberOfVersions The number of latest enabled data versions to retrieve. The maximum value is 5. (optional)
         * @return LatestEnabledDVRequestBuilder
         */
        public LatestEnabledDVRequestBuilder numberOfVersions(Integer numberOfVersions) {
            this.numberOfVersions = numberOfVersions;
            return this;
        }
        
        /**
         * Build call for latestEnabledDV
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return latestEnabledDVCall(tenantCode, limit, start, numberOfVersions, _callback);
        }


        /**
         * Execute latestEnabledDV request
         * @return MultipleTenantDataVersionsListDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public MultipleTenantDataVersionsListDTO execute() throws ApiException {
            ApiResponse<MultipleTenantDataVersionsListDTO> localVarResp = latestEnabledDVWithHttpInfo(tenantCode, limit, start, numberOfVersions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute latestEnabledDV request with HTTP info returned
         * @return ApiResponse&lt;MultipleTenantDataVersionsListDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MultipleTenantDataVersionsListDTO> executeWithHttpInfo() throws ApiException {
            return latestEnabledDVWithHttpInfo(tenantCode, limit, start, numberOfVersions);
        }

        /**
         * Execute latestEnabledDV request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MultipleTenantDataVersionsListDTO> _callback) throws ApiException {
            return latestEnabledDVAsync(tenantCode, limit, start, numberOfVersions, _callback);
        }
    }

    /**
     * Retrieve the latest enabled data versions for all analytic tenants
     * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
     * @return LatestEnabledDVRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public LatestEnabledDVRequestBuilder latestEnabledDV() throws IllegalArgumentException {
        return new LatestEnabledDVRequestBuilder();
    }
    private okhttp3.Call processingJobAndStatusCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/dispatching-jobs/:jobId/processing-jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dispatchingJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dispatchingJobId", dispatchingJobId));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processingJobAndStatusValidateBeforeCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        return processingJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);

    }


    private ApiResponse<ProcessingJobAndStatusResponse> processingJobAndStatusWithHttpInfo(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId) throws ApiException {
        okhttp3.Call localVarCall = processingJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, null);
        Type localVarReturnType = new TypeToken<ProcessingJobAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processingJobAndStatusAsync(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback<ProcessingJobAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processingJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        Type localVarReturnType = new TypeToken<ProcessingJobAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessingJobAndStatusRequestBuilder {
        private String dispatchingJobId;
        private String tenantCode;
        private Integer limit;
        private Integer start;
        private String jobId;

        private ProcessingJobAndStatusRequestBuilder() {
        }

        /**
         * Set dispatchingJobId
         * @param dispatchingJobId The ID of the dispatching job that generated the extraction jobs. (optional)
         * @return ProcessingJobAndStatusRequestBuilder
         */
        public ProcessingJobAndStatusRequestBuilder dispatchingJobId(String dispatchingJobId) {
            this.dispatchingJobId = dispatchingJobId;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return ProcessingJobAndStatusRequestBuilder
         */
        public ProcessingJobAndStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of extraction job statuses to retrieve. (optional)
         * @return ProcessingJobAndStatusRequestBuilder
         */
        public ProcessingJobAndStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ProcessingJobAndStatusRequestBuilder
         */
        public ProcessingJobAndStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId The ID of the dispatching job you want to retrieve. (optional)
         * @return ProcessingJobAndStatusRequestBuilder
         */
        public ProcessingJobAndStatusRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for processingJobAndStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processingJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }


        /**
         * Execute processingJobAndStatus request
         * @return ProcessingJobAndStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProcessingJobAndStatusResponse execute() throws ApiException {
            ApiResponse<ProcessingJobAndStatusResponse> localVarResp = processingJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processingJobAndStatus request with HTTP info returned
         * @return ApiResponse&lt;ProcessingJobAndStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProcessingJobAndStatusResponse> executeWithHttpInfo() throws ApiException {
            return processingJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
        }

        /**
         * Execute processingJobAndStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProcessingJobAndStatusResponse> _callback) throws ApiException {
            return processingJobAndStatusAsync(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }
    }

    /**
     * Retrieve a dispatching job&#39;s processing jobs with their statuses
     * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which in turn generate processing jobs and receiving jobs.
     * @return ProcessingJobAndStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProcessingJobAndStatusRequestBuilder processingJobAndStatus() throws IllegalArgumentException {
        return new ProcessingJobAndStatusRequestBuilder();
    }
    private okhttp3.Call processingJobStatusCall(String tenantCode, Integer limit, Integer start, String receivingJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/processing-jobs/:receivingJobId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (receivingJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receivingJobId", receivingJobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processingJobStatusValidateBeforeCall(String tenantCode, Integer limit, Integer start, String receivingJobId, final ApiCallback _callback) throws ApiException {
        return processingJobStatusCall(tenantCode, limit, start, receivingJobId, _callback);

    }


    private ApiResponse<ProcessingJobStatusResponse> processingJobStatusWithHttpInfo(String tenantCode, Integer limit, Integer start, String receivingJobId) throws ApiException {
        okhttp3.Call localVarCall = processingJobStatusValidateBeforeCall(tenantCode, limit, start, receivingJobId, null);
        Type localVarReturnType = new TypeToken<ProcessingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processingJobStatusAsync(String tenantCode, Integer limit, Integer start, String receivingJobId, final ApiCallback<ProcessingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = processingJobStatusValidateBeforeCall(tenantCode, limit, start, receivingJobId, _callback);
        Type localVarReturnType = new TypeToken<ProcessingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProcessingJobStatusRequestBuilder {
        private String tenantCode;
        private Integer limit;
        private Integer start;
        private String receivingJobId;

        private ProcessingJobStatusRequestBuilder() {
        }

        /**
         * Set tenantCode
         * @param tenantCode The tenant code of the tenant you want to retrieve the processing jobs for.  Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return ProcessingJobStatusRequestBuilder
         */
        public ProcessingJobStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of processing jobs to retrieve per page. (optional)
         * @return ProcessingJobStatusRequestBuilder
         */
        public ProcessingJobStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ProcessingJobStatusRequestBuilder
         */
        public ProcessingJobStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set receivingJobId
         * @param receivingJobId The receiving job ID (optional)
         * @return ProcessingJobStatusRequestBuilder
         */
        public ProcessingJobStatusRequestBuilder receivingJobId(String receivingJobId) {
            this.receivingJobId = receivingJobId;
            return this;
        }
        
        /**
         * Build call for processingJobStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processingJobStatusCall(tenantCode, limit, start, receivingJobId, _callback);
        }


        /**
         * Execute processingJobStatus request
         * @return ProcessingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ProcessingJobStatusResponse execute() throws ApiException {
            ApiResponse<ProcessingJobStatusResponse> localVarResp = processingJobStatusWithHttpInfo(tenantCode, limit, start, receivingJobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute processingJobStatus request with HTTP info returned
         * @return ApiResponse&lt;ProcessingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProcessingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return processingJobStatusWithHttpInfo(tenantCode, limit, start, receivingJobId);
        }

        /**
         * Execute processingJobStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProcessingJobStatusResponse> _callback) throws ApiException {
            return processingJobStatusAsync(tenantCode, limit, start, receivingJobId, _callback);
        }
    }

    /**
     * Retrieve processing job statuses by receiving job ID
     * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant&#39;s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
     * @return ProcessingJobStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ProcessingJobStatusRequestBuilder processingJobStatus() throws IllegalArgumentException {
        return new ProcessingJobStatusRequestBuilder();
    }
    private okhttp3.Call receivingJobAndStatusCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/dispatching-jobs/:jobId/receiving-jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dispatchingJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dispatchingJobId", dispatchingJobId));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receivingJobAndStatusValidateBeforeCall(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback _callback) throws ApiException {
        return receivingJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);

    }


    private ApiResponse<ReceivingJobAndStatusResponse> receivingJobAndStatusWithHttpInfo(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId) throws ApiException {
        okhttp3.Call localVarCall = receivingJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, null);
        Type localVarReturnType = new TypeToken<ReceivingJobAndStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call receivingJobAndStatusAsync(String dispatchingJobId, String tenantCode, Integer limit, Integer start, String jobId, final ApiCallback<ReceivingJobAndStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receivingJobAndStatusValidateBeforeCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        Type localVarReturnType = new TypeToken<ReceivingJobAndStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReceivingJobAndStatusRequestBuilder {
        private String dispatchingJobId;
        private String tenantCode;
        private Integer limit;
        private Integer start;
        private String jobId;

        private ReceivingJobAndStatusRequestBuilder() {
        }

        /**
         * Set dispatchingJobId
         * @param dispatchingJobId The ID of the dispatching job that generated the extraction jobs. (optional)
         * @return ReceivingJobAndStatusRequestBuilder
         */
        public ReceivingJobAndStatusRequestBuilder dispatchingJobId(String dispatchingJobId) {
            this.dispatchingJobId = dispatchingJobId;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.  Use this if you are only interested in the results for one analytic tenant. (optional)
         * @return ReceivingJobAndStatusRequestBuilder
         */
        public ReceivingJobAndStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of extraction job statuses to retrieve. (optional)
         * @return ReceivingJobAndStatusRequestBuilder
         */
        public ReceivingJobAndStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ReceivingJobAndStatusRequestBuilder
         */
        public ReceivingJobAndStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId The ID of the dispatching job you want to retrieve. (optional)
         * @return ReceivingJobAndStatusRequestBuilder
         */
        public ReceivingJobAndStatusRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for receivingJobAndStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return receivingJobAndStatusCall(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }


        /**
         * Execute receivingJobAndStatus request
         * @return ReceivingJobAndStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ReceivingJobAndStatusResponse execute() throws ApiException {
            ApiResponse<ReceivingJobAndStatusResponse> localVarResp = receivingJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute receivingJobAndStatus request with HTTP info returned
         * @return ApiResponse&lt;ReceivingJobAndStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceivingJobAndStatusResponse> executeWithHttpInfo() throws ApiException {
            return receivingJobAndStatusWithHttpInfo(dispatchingJobId, tenantCode, limit, start, jobId);
        }

        /**
         * Execute receivingJobAndStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceivingJobAndStatusResponse> _callback) throws ApiException {
            return receivingJobAndStatusAsync(dispatchingJobId, tenantCode, limit, start, jobId, _callback);
        }
    }

    /**
     * Retrieve a dispatching job&#39;s receiving jobs with their statuses
     * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which in turn generate processing jobs and receiving jobs.
     * @return ReceivingJobAndStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ReceivingJobAndStatusRequestBuilder receivingJobAndStatus() throws IllegalArgumentException {
        return new ReceivingJobAndStatusRequestBuilder();
    }
    private okhttp3.Call receivingJobStatusCall(Boolean jobs, String tenantCode, Integer start, Integer limit, String receivingJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/jobs/receiving-jobs/:receivingJobId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobs", jobs));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (receivingJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("receivingJobId", receivingJobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receivingJobStatusValidateBeforeCall(Boolean jobs, String tenantCode, Integer start, Integer limit, String receivingJobId, final ApiCallback _callback) throws ApiException {
        return receivingJobStatusCall(jobs, tenantCode, start, limit, receivingJobId, _callback);

    }


    private ApiResponse<ReceivingJobStatusResponse> receivingJobStatusWithHttpInfo(Boolean jobs, String tenantCode, Integer start, Integer limit, String receivingJobId) throws ApiException {
        okhttp3.Call localVarCall = receivingJobStatusValidateBeforeCall(jobs, tenantCode, start, limit, receivingJobId, null);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call receivingJobStatusAsync(Boolean jobs, String tenantCode, Integer start, Integer limit, String receivingJobId, final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receivingJobStatusValidateBeforeCall(jobs, tenantCode, start, limit, receivingJobId, _callback);
        Type localVarReturnType = new TypeToken<ReceivingJobStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReceivingJobStatusRequestBuilder {
        private Boolean jobs;
        private String tenantCode;
        private Integer start;
        private Integer limit;
        private String receivingJobId;

        private ReceivingJobStatusRequestBuilder() {
        }

        /**
         * Set jobs
         * @param jobs If \&quot;true\&quot;, returns the status of receiving jobs spawned by the receiving job specified by jobId. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder jobs(Boolean jobs) {
            this.jobs = jobs;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of the tenant you want to retrieve the receiving jobs for. Use this if you are only interested  in the results for one analytic tenant. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of job statuses to return per page. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set receivingJobId
         * @param receivingJobId The jobId provided after sending data to Visier. (optional)
         * @return ReceivingJobStatusRequestBuilder
         */
        public ReceivingJobStatusRequestBuilder receivingJobId(String receivingJobId) {
            this.receivingJobId = receivingJobId;
            return this;
        }
        
        /**
         * Build call for receivingJobStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return receivingJobStatusCall(jobs, tenantCode, start, limit, receivingJobId, _callback);
        }


        /**
         * Execute receivingJobStatus request
         * @return ReceivingJobStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ReceivingJobStatusResponse execute() throws ApiException {
            ApiResponse<ReceivingJobStatusResponse> localVarResp = receivingJobStatusWithHttpInfo(jobs, tenantCode, start, limit, receivingJobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute receivingJobStatus request with HTTP info returned
         * @return ApiResponse&lt;ReceivingJobStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReceivingJobStatusResponse> executeWithHttpInfo() throws ApiException {
            return receivingJobStatusWithHttpInfo(jobs, tenantCode, start, limit, receivingJobId);
        }

        /**
         * Execute receivingJobStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReceivingJobStatusResponse> _callback) throws ApiException {
            return receivingJobStatusAsync(jobs, tenantCode, start, limit, receivingJobId, _callback);
        }
    }

    /**
     * Retrieve a receiving job&#39;s status
     * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier&#39;s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
     * @return ReceivingJobStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public ReceivingJobStatusRequestBuilder receivingJobStatus() throws IllegalArgumentException {
        return new ReceivingJobStatusRequestBuilder();
    }
    private okhttp3.Call retrieveDataUploadsCall(String uploadJobId, Integer tenantCode, Integer limit, Integer start, Integer numberOfDataUploads, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/op/data/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uploadJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadJobId", uploadJobId));
        }

        if (tenantCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenantCode", tenantCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (numberOfDataUploads != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfDataUploads", numberOfDataUploads));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveDataUploadsValidateBeforeCall(String uploadJobId, Integer tenantCode, Integer limit, Integer start, Integer numberOfDataUploads, final ApiCallback _callback) throws ApiException {
        return retrieveDataUploadsCall(uploadJobId, tenantCode, limit, start, numberOfDataUploads, _callback);

    }


    private ApiResponse<TenantDataUploadsListResponseDTO> retrieveDataUploadsWithHttpInfo(String uploadJobId, Integer tenantCode, Integer limit, Integer start, Integer numberOfDataUploads) throws ApiException {
        okhttp3.Call localVarCall = retrieveDataUploadsValidateBeforeCall(uploadJobId, tenantCode, limit, start, numberOfDataUploads, null);
        Type localVarReturnType = new TypeToken<TenantDataUploadsListResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrieveDataUploadsAsync(String uploadJobId, Integer tenantCode, Integer limit, Integer start, Integer numberOfDataUploads, final ApiCallback<TenantDataUploadsListResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveDataUploadsValidateBeforeCall(uploadJobId, tenantCode, limit, start, numberOfDataUploads, _callback);
        Type localVarReturnType = new TypeToken<TenantDataUploadsListResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RetrieveDataUploadsRequestBuilder {
        private String uploadJobId;
        private Integer tenantCode;
        private Integer limit;
        private Integer start;
        private Integer numberOfDataUploads;

        private RetrieveDataUploadsRequestBuilder() {
        }

        /**
         * Set uploadJobId
         * @param uploadJobId The job ID of an upload job. Use this if you are interested in the data uploads for a specific upload job. (optional)
         * @return RetrieveDataUploadsRequestBuilder
         */
        public RetrieveDataUploadsRequestBuilder uploadJobId(String uploadJobId) {
            this.uploadJobId = uploadJobId;
            return this;
        }
        
        /**
         * Set tenantCode
         * @param tenantCode The tenant code of a specific analytic tenant that you want to retrieve the data uploads for. (optional)
         * @return RetrieveDataUploadsRequestBuilder
         */
        public RetrieveDataUploadsRequestBuilder tenantCode(Integer tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The limit of analytic tenants to retrieve data uploads for. This parameter is not used if the tenantCode parameter is specified. (optional)
         * @return RetrieveDataUploadsRequestBuilder
         */
        public RetrieveDataUploadsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set start
         * @param start The index to start retrieving results from, also known as offset. The index begins at 0. (optional)
         * @return RetrieveDataUploadsRequestBuilder
         */
        public RetrieveDataUploadsRequestBuilder start(Integer start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set numberOfDataUploads
         * @param numberOfDataUploads The maximum number of latest enabled data uploads to retrieve for each analytic tenant. The maximum value is 5. (optional)
         * @return RetrieveDataUploadsRequestBuilder
         */
        public RetrieveDataUploadsRequestBuilder numberOfDataUploads(Integer numberOfDataUploads) {
            this.numberOfDataUploads = numberOfDataUploads;
            return this;
        }
        
        /**
         * Build call for retrieveDataUploads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrieveDataUploadsCall(uploadJobId, tenantCode, limit, start, numberOfDataUploads, _callback);
        }


        /**
         * Execute retrieveDataUploads request
         * @return TenantDataUploadsListResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public TenantDataUploadsListResponseDTO execute() throws ApiException {
            ApiResponse<TenantDataUploadsListResponseDTO> localVarResp = retrieveDataUploadsWithHttpInfo(uploadJobId, tenantCode, limit, start, numberOfDataUploads);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute retrieveDataUploads request with HTTP info returned
         * @return ApiResponse&lt;TenantDataUploadsListResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TenantDataUploadsListResponseDTO> executeWithHttpInfo() throws ApiException {
            return retrieveDataUploadsWithHttpInfo(uploadJobId, tenantCode, limit, start, numberOfDataUploads);
        }

        /**
         * Execute retrieveDataUploads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TenantDataUploadsListResponseDTO> _callback) throws ApiException {
            return retrieveDataUploadsAsync(uploadJobId, tenantCode, limit, start, numberOfDataUploads, _callback);
        }
    }

    /**
     * Retrieve data uploads
     * Use this API to retrieve the data uploads and whether they&#39;re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
     * @return RetrieveDataUploadsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveDataUploadsRequestBuilder retrieveDataUploads() throws IllegalArgumentException {
        return new RetrieveDataUploadsRequestBuilder();
    }
    private okhttp3.Call startExtractionCall(StartExtractionRequest startExtractionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startExtractionRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data/startExtractAndLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startExtractionValidateBeforeCall(StartExtractionRequest startExtractionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startExtractionRequest' is set
        if (startExtractionRequest == null) {
            throw new ApiException("Missing the required parameter 'startExtractionRequest' when calling startExtraction(Async)");
        }

        return startExtractionCall(startExtractionRequest, _callback);

    }


    private ApiResponse<StartExtractionResponse> startExtractionWithHttpInfo(StartExtractionRequest startExtractionRequest) throws ApiException {
        okhttp3.Call localVarCall = startExtractionValidateBeforeCall(startExtractionRequest, null);
        Type localVarReturnType = new TypeToken<StartExtractionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startExtractionAsync(StartExtractionRequest startExtractionRequest, final ApiCallback<StartExtractionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startExtractionValidateBeforeCall(startExtractionRequest, _callback);
        Type localVarReturnType = new TypeToken<StartExtractionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartExtractionRequestBuilder {
        private StartExtractionModel model;

        private StartExtractionRequestBuilder() {
        }

        /**
         * Set model
         * @param model A form body key that contains a collection of key-value pairs. (optional)
         * @return StartExtractionRequestBuilder
         */
        public StartExtractionRequestBuilder model(StartExtractionModel model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for startExtraction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StartExtractionRequest startExtractionRequest = buildBodyParams();
            return startExtractionCall(startExtractionRequest, _callback);
        }

        private StartExtractionRequest buildBodyParams() {
            StartExtractionRequest startExtractionRequest = new StartExtractionRequest();
            startExtractionRequest.model(this.model);
            return startExtractionRequest;
        }

        /**
         * Execute startExtraction request
         * @return StartExtractionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public StartExtractionResponse execute() throws ApiException {
            StartExtractionRequest startExtractionRequest = buildBodyParams();
            ApiResponse<StartExtractionResponse> localVarResp = startExtractionWithHttpInfo(startExtractionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startExtraction request with HTTP info returned
         * @return ApiResponse&lt;StartExtractionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StartExtractionResponse> executeWithHttpInfo() throws ApiException {
            StartExtractionRequest startExtractionRequest = buildBodyParams();
            return startExtractionWithHttpInfo(startExtractionRequest);
        }

        /**
         * Execute startExtraction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StartExtractionResponse> _callback) throws ApiException {
            StartExtractionRequest startExtractionRequest = buildBodyParams();
            return startExtractionAsync(startExtractionRequest, _callback);
        }
    }

    /**
     * Trigger extraction jobs
     * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \&quot;parent\&quot; of the extraction  jobs and its job ID is returned in the response.
     * @param startExtractionRequest  (required)
     * @return StartExtractionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public StartExtractionRequestBuilder startExtraction() throws IllegalArgumentException {
        return new StartExtractionRequestBuilder();
    }
    private okhttp3.Call startLoadCall(DataLoadRequest dataLoadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataLoadRequest;

        // create path and map variables
        String localVarPath = "/v1/op/data/startload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startLoadValidateBeforeCall(DataLoadRequest dataLoadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataLoadRequest' is set
        if (dataLoadRequest == null) {
            throw new ApiException("Missing the required parameter 'dataLoadRequest' when calling startLoad(Async)");
        }

        return startLoadCall(dataLoadRequest, _callback);

    }


    private ApiResponse<DataLoadResponse> startLoadWithHttpInfo(DataLoadRequest dataLoadRequest) throws ApiException {
        okhttp3.Call localVarCall = startLoadValidateBeforeCall(dataLoadRequest, null);
        Type localVarReturnType = new TypeToken<DataLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startLoadAsync(DataLoadRequest dataLoadRequest, final ApiCallback<DataLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startLoadValidateBeforeCall(dataLoadRequest, _callback);
        Type localVarReturnType = new TypeToken<DataLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartLoadRequestBuilder {
        private Map<String, MapValue> model;

        private StartLoadRequestBuilder() {
        }

        /**
         * Set model
         * @param model A form body key that contains a collection of key-value pairs.   **Note:** The only supported key value is &#x60;files&#x60; and the value is a comma-separated list of file names.  Example:  &#x60;\\\&quot;files\\\&quot;: \\\&quot;/path/to/file1.zip.gpg,/path/to/another/file.zip.gpg\\\&quot;&#x60; (optional)
         * @return StartLoadRequestBuilder
         */
        public StartLoadRequestBuilder model(Map<String, MapValue> model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for startLoad
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DataLoadRequest dataLoadRequest = buildBodyParams();
            return startLoadCall(dataLoadRequest, _callback);
        }

        private DataLoadRequest buildBodyParams() {
            DataLoadRequest dataLoadRequest = new DataLoadRequest();
            dataLoadRequest.model(this.model);
            return dataLoadRequest;
        }

        /**
         * Execute startLoad request
         * @return DataLoadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public DataLoadResponse execute() throws ApiException {
            DataLoadRequest dataLoadRequest = buildBodyParams();
            ApiResponse<DataLoadResponse> localVarResp = startLoadWithHttpInfo(dataLoadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startLoad request with HTTP info returned
         * @return ApiResponse&lt;DataLoadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataLoadResponse> executeWithHttpInfo() throws ApiException {
            DataLoadRequest dataLoadRequest = buildBodyParams();
            return startLoadWithHttpInfo(dataLoadRequest);
        }

        /**
         * Execute startLoad request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataLoadResponse> _callback) throws ApiException {
            DataLoadRequest dataLoadRequest = buildBodyParams();
            return startLoadAsync(dataLoadRequest, _callback);
        }
    }

    /**
     * Start the data load for an analytic tenant
     * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier&#39;s public encryption key and upload the source data files to Visier&#39;s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
     * @param dataLoadRequest  (required)
     * @return StartLoadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public StartLoadRequestBuilder startLoad() throws IllegalArgumentException {
        return new StartLoadRequestBuilder();
    }
}
