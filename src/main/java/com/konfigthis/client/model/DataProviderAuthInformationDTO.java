/*
 * Visier Data and Job Handling APIs
 * Visier APIs for data and job handling
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DataProviderAuthParamsDTO;
import com.konfigthis.client.model.DataProviderBasicInformationDTO;
import com.konfigthis.client.model.DataProviderBasicMetadataDTO;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DataProviderAuthInformationDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DataProviderAuthInformationDTO {
  public static final String SERIALIZED_NAME_DATA_PROVIDER_AUTH_PARAMS = "dataProviderAuthParams";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER_AUTH_PARAMS)
  private DataProviderAuthParamsDTO dataProviderAuthParams;

  public static final String SERIALIZED_NAME_DATA_PROVIDER_BASIC_INFORMATION = "dataProviderBasicInformation";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER_BASIC_INFORMATION)
  private DataProviderBasicInformationDTO dataProviderBasicInformation;

  public static final String SERIALIZED_NAME_DATA_PROVIDER_METADATA = "dataProviderMetadata";
  @SerializedName(SERIALIZED_NAME_DATA_PROVIDER_METADATA)
  private DataProviderBasicMetadataDTO dataProviderMetadata;

  public DataProviderAuthInformationDTO() {
  }

  public DataProviderAuthInformationDTO dataProviderAuthParams(DataProviderAuthParamsDTO dataProviderAuthParams) {
    
    
    
    
    this.dataProviderAuthParams = dataProviderAuthParams;
    return this;
  }

   /**
   * The authentication information for the credential.
   * @return dataProviderAuthParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authentication information for the credential.")

  public DataProviderAuthParamsDTO getDataProviderAuthParams() {
    return dataProviderAuthParams;
  }


  public void setDataProviderAuthParams(DataProviderAuthParamsDTO dataProviderAuthParams) {
    
    
    
    this.dataProviderAuthParams = dataProviderAuthParams;
  }


  public DataProviderAuthInformationDTO dataProviderBasicInformation(DataProviderBasicInformationDTO dataProviderBasicInformation) {
    
    
    
    
    this.dataProviderBasicInformation = dataProviderBasicInformation;
    return this;
  }

   /**
   * The display name and description for the credential.
   * @return dataProviderBasicInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The display name and description for the credential.")

  public DataProviderBasicInformationDTO getDataProviderBasicInformation() {
    return dataProviderBasicInformation;
  }


  public void setDataProviderBasicInformation(DataProviderBasicInformationDTO dataProviderBasicInformation) {
    
    
    
    this.dataProviderBasicInformation = dataProviderBasicInformation;
  }


  public DataProviderAuthInformationDTO dataProviderMetadata(DataProviderBasicMetadataDTO dataProviderMetadata) {
    
    
    
    
    this.dataProviderMetadata = dataProviderMetadata;
    return this;
  }

   /**
   * Get dataProviderMetadata
   * @return dataProviderMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DataProviderBasicMetadataDTO getDataProviderMetadata() {
    return dataProviderMetadata;
  }


  public void setDataProviderMetadata(DataProviderBasicMetadataDTO dataProviderMetadata) {
    
    
    
    this.dataProviderMetadata = dataProviderMetadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DataProviderAuthInformationDTO instance itself
   */
  public DataProviderAuthInformationDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataProviderAuthInformationDTO dataProviderAuthInformationDTO = (DataProviderAuthInformationDTO) o;
    return Objects.equals(this.dataProviderAuthParams, dataProviderAuthInformationDTO.dataProviderAuthParams) &&
        Objects.equals(this.dataProviderBasicInformation, dataProviderAuthInformationDTO.dataProviderBasicInformation) &&
        Objects.equals(this.dataProviderMetadata, dataProviderAuthInformationDTO.dataProviderMetadata)&&
        Objects.equals(this.additionalProperties, dataProviderAuthInformationDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataProviderAuthParams, dataProviderBasicInformation, dataProviderMetadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataProviderAuthInformationDTO {\n");
    sb.append("    dataProviderAuthParams: ").append(toIndentedString(dataProviderAuthParams)).append("\n");
    sb.append("    dataProviderBasicInformation: ").append(toIndentedString(dataProviderBasicInformation)).append("\n");
    sb.append("    dataProviderMetadata: ").append(toIndentedString(dataProviderMetadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataProviderAuthParams");
    openapiFields.add("dataProviderBasicInformation");
    openapiFields.add("dataProviderMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataProviderAuthInformationDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DataProviderAuthInformationDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataProviderAuthInformationDTO is not found in the empty JSON string", DataProviderAuthInformationDTO.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `dataProviderAuthParams`
      if (jsonObj.get("dataProviderAuthParams") != null && !jsonObj.get("dataProviderAuthParams").isJsonNull()) {
        DataProviderAuthParamsDTO.validateJsonObject(jsonObj.getAsJsonObject("dataProviderAuthParams"));
      }
      // validate the optional field `dataProviderBasicInformation`
      if (jsonObj.get("dataProviderBasicInformation") != null && !jsonObj.get("dataProviderBasicInformation").isJsonNull()) {
        DataProviderBasicInformationDTO.validateJsonObject(jsonObj.getAsJsonObject("dataProviderBasicInformation"));
      }
      // validate the optional field `dataProviderMetadata`
      if (jsonObj.get("dataProviderMetadata") != null && !jsonObj.get("dataProviderMetadata").isJsonNull()) {
        DataProviderBasicMetadataDTO.validateJsonObject(jsonObj.getAsJsonObject("dataProviderMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataProviderAuthInformationDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataProviderAuthInformationDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataProviderAuthInformationDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataProviderAuthInformationDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DataProviderAuthInformationDTO>() {
           @Override
           public void write(JsonWriter out, DataProviderAuthInformationDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DataProviderAuthInformationDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DataProviderAuthInformationDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataProviderAuthInformationDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataProviderAuthInformationDTO
  * @throws IOException if the JSON string is invalid with respect to DataProviderAuthInformationDTO
  */
  public static DataProviderAuthInformationDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataProviderAuthInformationDTO.class);
  }

 /**
  * Convert an instance of DataProviderAuthInformationDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

