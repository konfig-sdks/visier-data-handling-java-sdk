/*
 * Visier Data and Job Handling APIs
 * Visier APIs for data and job handling
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobCancellationResultDTO
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobCancellationResultDTO {
  public static final String SERIALIZED_NAME_TENANT_CODE = "tenantCode";
  @SerializedName(SERIALIZED_NAME_TENANT_CODE)
  private String tenantCode;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_PARENT_JOB_ID = "parentJobId";
  @SerializedName(SERIALIZED_NAME_PARENT_JOB_ID)
  private String parentJobId;

  /**
   * The status of the cancellation.
   */
  @JsonAdapter(CancelStatusEnum.Adapter.class)
 public enum CancelStatusEnum {
    FAILED("CANCEL_FAILED"),
    
    SUCCEEDED("CANCEL_SUCCEEDED");

    private String value;

    CancelStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CancelStatusEnum fromValue(String value) {
      for (CancelStatusEnum b : CancelStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CancelStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CancelStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CancelStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CancelStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CANCEL_STATUS = "cancelStatus";
  @SerializedName(SERIALIZED_NAME_CANCEL_STATUS)
  private CancelStatusEnum cancelStatus;

  public static final String SERIALIZED_NAME_JOB_STATUS = "jobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private String jobStatus;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public JobCancellationResultDTO() {
  }

  public JobCancellationResultDTO tenantCode(String tenantCode) {
    
    
    
    
    this.tenantCode = tenantCode;
    return this;
  }

   /**
   * The analytic tenant whose job the cancel operation was conducted for.
   * @return tenantCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The analytic tenant whose job the cancel operation was conducted for.")

  public String getTenantCode() {
    return tenantCode;
  }


  public void setTenantCode(String tenantCode) {
    
    
    
    this.tenantCode = tenantCode;
  }


  public JobCancellationResultDTO jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * The job ID of the job that the cancel operation was conducted for.
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The job ID of the job that the cancel operation was conducted for.")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public JobCancellationResultDTO jobType(String jobType) {
    
    
    
    
    this.jobType = jobType;
    return this;
  }

   /**
   * The job type associated with the job ID.
   * @return jobType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The job type associated with the job ID.")

  public String getJobType() {
    return jobType;
  }


  public void setJobType(String jobType) {
    
    
    
    this.jobType = jobType;
  }


  public JobCancellationResultDTO parentJobId(String parentJobId) {
    
    
    
    
    this.parentJobId = parentJobId;
    return this;
  }

   /**
   * If applicable, the job ID of the job that spawned the given job.
   * @return parentJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If applicable, the job ID of the job that spawned the given job.")

  public String getParentJobId() {
    return parentJobId;
  }


  public void setParentJobId(String parentJobId) {
    
    
    
    this.parentJobId = parentJobId;
  }


  public JobCancellationResultDTO cancelStatus(CancelStatusEnum cancelStatus) {
    
    
    
    
    this.cancelStatus = cancelStatus;
    return this;
  }

   /**
   * The status of the cancellation.
   * @return cancelStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The status of the cancellation.")

  public CancelStatusEnum getCancelStatus() {
    return cancelStatus;
  }


  public void setCancelStatus(CancelStatusEnum cancelStatus) {
    
    
    
    this.cancelStatus = cancelStatus;
  }


  public JobCancellationResultDTO jobStatus(String jobStatus) {
    
    
    
    
    this.jobStatus = jobStatus;
    return this;
  }

   /**
   * The job status after the cancel operation. If successful, the status is either Cancelled or Cancelling.
   * @return jobStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The job status after the cancel operation. If successful, the status is either Cancelled or Cancelling.")

  public String getJobStatus() {
    return jobStatus;
  }


  public void setJobStatus(String jobStatus) {
    
    
    
    this.jobStatus = jobStatus;
  }


  public JobCancellationResultDTO message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * If applicable, the message explains what errors occurred while cancelling the jobs.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If applicable, the message explains what errors occurred while cancelling the jobs.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobCancellationResultDTO instance itself
   */
  public JobCancellationResultDTO putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobCancellationResultDTO jobCancellationResultDTO = (JobCancellationResultDTO) o;
    return Objects.equals(this.tenantCode, jobCancellationResultDTO.tenantCode) &&
        Objects.equals(this.jobId, jobCancellationResultDTO.jobId) &&
        Objects.equals(this.jobType, jobCancellationResultDTO.jobType) &&
        Objects.equals(this.parentJobId, jobCancellationResultDTO.parentJobId) &&
        Objects.equals(this.cancelStatus, jobCancellationResultDTO.cancelStatus) &&
        Objects.equals(this.jobStatus, jobCancellationResultDTO.jobStatus) &&
        Objects.equals(this.message, jobCancellationResultDTO.message)&&
        Objects.equals(this.additionalProperties, jobCancellationResultDTO.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantCode, jobId, jobType, parentJobId, cancelStatus, jobStatus, message, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobCancellationResultDTO {\n");
    sb.append("    tenantCode: ").append(toIndentedString(tenantCode)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    parentJobId: ").append(toIndentedString(parentJobId)).append("\n");
    sb.append("    cancelStatus: ").append(toIndentedString(cancelStatus)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenantCode");
    openapiFields.add("jobId");
    openapiFields.add("jobType");
    openapiFields.add("parentJobId");
    openapiFields.add("cancelStatus");
    openapiFields.add("jobStatus");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobCancellationResultDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobCancellationResultDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobCancellationResultDTO is not found in the empty JSON string", JobCancellationResultDTO.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("tenantCode") != null && !jsonObj.get("tenantCode").isJsonNull()) && !jsonObj.get("tenantCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantCode").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      if ((jsonObj.get("parentJobId") != null && !jsonObj.get("parentJobId").isJsonNull()) && !jsonObj.get("parentJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentJobId").toString()));
      }
      if ((jsonObj.get("cancelStatus") != null && !jsonObj.get("cancelStatus").isJsonNull()) && !jsonObj.get("cancelStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelStatus").toString()));
      }
      if ((jsonObj.get("jobStatus") != null && !jsonObj.get("jobStatus").isJsonNull()) && !jsonObj.get("jobStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobStatus").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobCancellationResultDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobCancellationResultDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobCancellationResultDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobCancellationResultDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<JobCancellationResultDTO>() {
           @Override
           public void write(JsonWriter out, JobCancellationResultDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobCancellationResultDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobCancellationResultDTO instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobCancellationResultDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobCancellationResultDTO
  * @throws IOException if the JSON string is invalid with respect to JobCancellationResultDTO
  */
  public static JobCancellationResultDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobCancellationResultDTO.class);
  }

 /**
  * Convert an instance of JobCancellationResultDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

