/*
 * Visier Data and Job Handling APIs
 * Visier APIs for data and job handling
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * StartExtractionModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StartExtractionModel {
  public static final String SERIALIZED_NAME_TENANTS = "tenants";
  @SerializedName(SERIALIZED_NAME_TENANTS)
  private List<String> tenants = null;

  public static final String SERIALIZED_NAME_ALL_TENANTS = "allTenants";
  @SerializedName(SERIALIZED_NAME_ALL_TENANTS)
  private Boolean allTenants;

  public static final String SERIALIZED_NAME_OVERRIDE_LAST_EXTRACTION_TIMESTAMP = "overrideLastExtractionTimestamp";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_LAST_EXTRACTION_TIMESTAMP)
  private String overrideLastExtractionTimestamp;

  public static final String SERIALIZED_NAME_PUBLISH_DATA_LOAD_ARTIFACTS = "publishDataLoadArtifacts";
  @SerializedName(SERIALIZED_NAME_PUBLISH_DATA_LOAD_ARTIFACTS)
  private Boolean publishDataLoadArtifacts;

  public static final String SERIALIZED_NAME_RUN_PROCESSING_JOB = "runProcessingJob";
  @SerializedName(SERIALIZED_NAME_RUN_PROCESSING_JOB)
  private Boolean runProcessingJob;

  public static final String SERIALIZED_NAME_DATA_CATEGORY_ID = "dataCategoryId";
  @SerializedName(SERIALIZED_NAME_DATA_CATEGORY_ID)
  private String dataCategoryId;

  public static final String SERIALIZED_NAME_DISABLE_ARTIFACT_GENERATION = "disableArtifactGeneration";
  @SerializedName(SERIALIZED_NAME_DISABLE_ARTIFACT_GENERATION)
  private Boolean disableArtifactGeneration;

  public StartExtractionModel() {
  }

  public StartExtractionModel tenants(List<String> tenants) {
    
    
    
    
    this.tenants = tenants;
    return this;
  }

  public StartExtractionModel addTenantsItem(String tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new ArrayList<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

   /**
   * A list of analytic tenants to dispatch extraction jobs for. One extraction job is dispatched per tenant.
   * @return tenants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of analytic tenants to dispatch extraction jobs for. One extraction job is dispatched per tenant.")

  public List<String> getTenants() {
    return tenants;
  }


  public void setTenants(List<String> tenants) {
    
    
    
    this.tenants = tenants;
  }


  public StartExtractionModel allTenants(Boolean allTenants) {
    
    
    
    
    this.allTenants = allTenants;
    return this;
  }

   /**
   * If \&quot;true\&quot;, one extraction job is dispatched for each accessible analytic tenant.
   * @return allTenants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If \"true\", one extraction job is dispatched for each accessible analytic tenant.")

  public Boolean getAllTenants() {
    return allTenants;
  }


  public void setAllTenants(Boolean allTenants) {
    
    
    
    this.allTenants = allTenants;
  }


  public StartExtractionModel overrideLastExtractionTimestamp(String overrideLastExtractionTimestamp) {
    
    
    
    
    this.overrideLastExtractionTimestamp = overrideLastExtractionTimestamp;
    return this;
  }

   /**
   * The time from which to extract data.
   * @return overrideLastExtractionTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time from which to extract data.")

  public String getOverrideLastExtractionTimestamp() {
    return overrideLastExtractionTimestamp;
  }


  public void setOverrideLastExtractionTimestamp(String overrideLastExtractionTimestamp) {
    
    
    
    this.overrideLastExtractionTimestamp = overrideLastExtractionTimestamp;
  }


  public StartExtractionModel publishDataLoadArtifacts(Boolean publishDataLoadArtifacts) {
    
    
    
    
    this.publishDataLoadArtifacts = publishDataLoadArtifacts;
    return this;
  }

   /**
   * If \&quot;true\&quot;, the generated data load artifacts are published to Production immediately.
   * @return publishDataLoadArtifacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If \"true\", the generated data load artifacts are published to Production immediately.")

  public Boolean getPublishDataLoadArtifacts() {
    return publishDataLoadArtifacts;
  }


  public void setPublishDataLoadArtifacts(Boolean publishDataLoadArtifacts) {
    
    
    
    this.publishDataLoadArtifacts = publishDataLoadArtifacts;
  }


  public StartExtractionModel runProcessingJob(Boolean runProcessingJob) {
    
    
    
    
    this.runProcessingJob = runProcessingJob;
    return this;
  }

   /**
   * If \&quot;true\&quot;, a processing job is spawned after a dispatched extraction job runs successfully.
   * @return runProcessingJob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If \"true\", a processing job is spawned after a dispatched extraction job runs successfully.")

  public Boolean getRunProcessingJob() {
    return runProcessingJob;
  }


  public void setRunProcessingJob(Boolean runProcessingJob) {
    
    
    
    this.runProcessingJob = runProcessingJob;
  }


  public StartExtractionModel dataCategoryId(String dataCategoryId) {
    
    
    
    
    this.dataCategoryId = dataCategoryId;
    return this;
  }

   /**
   * The unique identifier of the data category on which to trigger the extraction job.
   * @return dataCategoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier of the data category on which to trigger the extraction job.")

  public String getDataCategoryId() {
    return dataCategoryId;
  }


  public void setDataCategoryId(String dataCategoryId) {
    
    
    
    this.dataCategoryId = dataCategoryId;
  }


  public StartExtractionModel disableArtifactGeneration(Boolean disableArtifactGeneration) {
    
    
    
    
    this.disableArtifactGeneration = disableArtifactGeneration;
    return this;
  }

   /**
   * If \&quot;true\&quot;, the job does not generate data load artifacts. If unspecified, the default is \&quot;false\&quot;.
   * @return disableArtifactGeneration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If \"true\", the job does not generate data load artifacts. If unspecified, the default is \"false\".")

  public Boolean getDisableArtifactGeneration() {
    return disableArtifactGeneration;
  }


  public void setDisableArtifactGeneration(Boolean disableArtifactGeneration) {
    
    
    
    this.disableArtifactGeneration = disableArtifactGeneration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StartExtractionModel instance itself
   */
  public StartExtractionModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartExtractionModel startExtractionModel = (StartExtractionModel) o;
    return Objects.equals(this.tenants, startExtractionModel.tenants) &&
        Objects.equals(this.allTenants, startExtractionModel.allTenants) &&
        Objects.equals(this.overrideLastExtractionTimestamp, startExtractionModel.overrideLastExtractionTimestamp) &&
        Objects.equals(this.publishDataLoadArtifacts, startExtractionModel.publishDataLoadArtifacts) &&
        Objects.equals(this.runProcessingJob, startExtractionModel.runProcessingJob) &&
        Objects.equals(this.dataCategoryId, startExtractionModel.dataCategoryId) &&
        Objects.equals(this.disableArtifactGeneration, startExtractionModel.disableArtifactGeneration)&&
        Objects.equals(this.additionalProperties, startExtractionModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenants, allTenants, overrideLastExtractionTimestamp, publishDataLoadArtifacts, runProcessingJob, dataCategoryId, disableArtifactGeneration, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartExtractionModel {\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    allTenants: ").append(toIndentedString(allTenants)).append("\n");
    sb.append("    overrideLastExtractionTimestamp: ").append(toIndentedString(overrideLastExtractionTimestamp)).append("\n");
    sb.append("    publishDataLoadArtifacts: ").append(toIndentedString(publishDataLoadArtifacts)).append("\n");
    sb.append("    runProcessingJob: ").append(toIndentedString(runProcessingJob)).append("\n");
    sb.append("    dataCategoryId: ").append(toIndentedString(dataCategoryId)).append("\n");
    sb.append("    disableArtifactGeneration: ").append(toIndentedString(disableArtifactGeneration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tenants");
    openapiFields.add("allTenants");
    openapiFields.add("overrideLastExtractionTimestamp");
    openapiFields.add("publishDataLoadArtifacts");
    openapiFields.add("runProcessingJob");
    openapiFields.add("dataCategoryId");
    openapiFields.add("disableArtifactGeneration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StartExtractionModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StartExtractionModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartExtractionModel is not found in the empty JSON string", StartExtractionModel.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tenants") != null && !jsonObj.get("tenants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenants` to be an array in the JSON string but got `%s`", jsonObj.get("tenants").toString()));
      }
      if ((jsonObj.get("overrideLastExtractionTimestamp") != null && !jsonObj.get("overrideLastExtractionTimestamp").isJsonNull()) && !jsonObj.get("overrideLastExtractionTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideLastExtractionTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overrideLastExtractionTimestamp").toString()));
      }
      if ((jsonObj.get("dataCategoryId") != null && !jsonObj.get("dataCategoryId").isJsonNull()) && !jsonObj.get("dataCategoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCategoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCategoryId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartExtractionModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartExtractionModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartExtractionModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartExtractionModel.class));

       return (TypeAdapter<T>) new TypeAdapter<StartExtractionModel>() {
           @Override
           public void write(JsonWriter out, StartExtractionModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StartExtractionModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StartExtractionModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StartExtractionModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StartExtractionModel
  * @throws IOException if the JSON string is invalid with respect to StartExtractionModel
  */
  public static StartExtractionModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartExtractionModel.class);
  }

 /**
  * Convert an instance of StartExtractionModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

