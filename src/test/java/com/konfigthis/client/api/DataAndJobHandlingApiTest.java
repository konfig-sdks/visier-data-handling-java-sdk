/*
 * Visier Data and Job Handling APIs
 * Visier APIs for data and job handling
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AssignConnectorCredentialRequest;
import com.konfigthis.client.model.AssignConnectorCredentialsResponseDTO;
import com.konfigthis.client.model.CancelJobBatchFromJobIdDTO;
import com.konfigthis.client.model.Connector;
import com.konfigthis.client.model.CredentialCreationAPIResponseDTO;
import com.konfigthis.client.model.DataLoadRequest;
import com.konfigthis.client.model.DataLoadResponse;
import com.konfigthis.client.model.DataProviderAuthInformationDTO;
import com.konfigthis.client.model.DataProviderAuthParamsDTO;
import com.konfigthis.client.model.DataProviderBasicInformationDTO;
import com.konfigthis.client.model.DataProviderBasicMetadataDTO;
import com.konfigthis.client.model.DisableDVModel;
import com.konfigthis.client.model.DisableDVRequest;
import com.konfigthis.client.model.DisableDVResponse;
import com.konfigthis.client.model.DispatchingJobStatusResponse;
import com.konfigthis.client.model.ExcludeDataUploadsRequest;
import com.konfigthis.client.model.ExtractionJobAndStatusResponse;
import com.konfigthis.client.model.ExtractorCredentialsAPIDTO;
import com.konfigthis.client.model.ImportDefinitionsAPIDTO;
import com.konfigthis.client.model.IncludeDataUploadsRequest;
import com.konfigthis.client.model.JobCancellationResultsDTO;
import com.konfigthis.client.model.MapValue;
import com.konfigthis.client.model.MultipleTenantDataVersionsListDTO;
import com.konfigthis.client.model.ProcessingJobAndStatusResponse;
import com.konfigthis.client.model.ProcessingJobStatusResponse;
import com.konfigthis.client.model.ReceivingJobAndStatusResponse;
import com.konfigthis.client.model.ReceivingJobStatusResponse;
import com.konfigthis.client.model.StartExtractionModel;
import com.konfigthis.client.model.StartExtractionRequest;
import com.konfigthis.client.model.StartExtractionResponse;
import com.konfigthis.client.model.Status;
import com.konfigthis.client.model.TenantDataUploadsListResponseDTO;
import com.konfigthis.client.model.TenantDataUploadsUpdateResponseDTO;
import com.konfigthis.client.model.UploadToExcludeModel;
import com.konfigthis.client.model.UploadToIncludeModel;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataAndJobHandlingApi
 */
@Disabled
public class DataAndJobHandlingApiTest {

    private static DataAndJobHandlingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DataAndJobHandlingApi(apiClient);
    }

    /**
     * Assign connector credentials to data connectors
     *
     * This API allows you to assign a connector credential to a data connector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignConnectorCredentialTest() throws ApiException {
        List<Connector> connectors = null;
        AssignConnectorCredentialsResponseDTO response = api.assignConnectorCredential()
                .connectors(connectors)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a list of jobs
     *
     * Use this API to cancel a list of processing jobs, upload jobs, receiving jobs, and extraction jobs.   Note: Receiving jobs with the Running status cannot be cancelled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelJobsTest() throws ApiException {
        List<String> jobIds = null;
        JobCancellationResultsDTO response = api.cancelJobs()
                .jobIds(jobIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a connector credential
     *
     * Use this API to create connector credentials for a specified tenant. Connector credentials allow Visier to  retrieve data from your source systems through an integration user in the source system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorCredentialTest() throws ApiException {
        DataProviderAuthParamsDTO dataProviderAuthParams = null;
        DataProviderBasicInformationDTO dataProviderBasicInformation = null;
        DataProviderBasicMetadataDTO dataProviderMetadata = null;
        String tenantCode = null;
        CredentialCreationAPIResponseDTO response = api.createConnectorCredential()
                .dataProviderAuthParams(dataProviderAuthParams)
                .dataProviderBasicInformation(dataProviderBasicInformation)
                .dataProviderMetadata(dataProviderMetadata)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all data connector credentials
     *
     * Use this API to retrieve a list of the connector credentials in a specified tenant. Connector credentials allow  Visier to retrieve data from your source systems through an integration user in the source system.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataConnectorCredentialsTest() throws ApiException {
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        ExtractorCredentialsAPIDTO response = api.dataConnectorCredentials()
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a list of all data connectors
     *
     * Use this API to retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative  to generating flat files and transferring them to Visier via SFTP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dataConnectorsTest() throws ApiException {
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        ImportDefinitionsAPIDTO response = api.dataConnectors()
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a connector credential
     *
     * Use this API to delete connector credentials from your tenants. Credentials that are no longer valid  should be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorCredentialTest() throws ApiException {
        String id = null;
        String tenantCode = null;
        String response = api.deleteConnectorCredential()
                .id(id)
                .tenantCode(tenantCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Disable data versions for a list of analytic tenants
     *
     * If you discover that a data version is not what is expected after running metric value validation on a data load,  you may want to disable the data version for that processing job.   Use this API to disable the latest enabled data versions for affected analytic tenants or to disable a particular  data version for each analytic tenant.   Note: Disabling an older data version may not have an effect on the state of the solution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableDVTest() throws ApiException {
        DisableDVModel model = null;
        DisableDVResponse response = api.disableDV()
                .model(model)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a dispatching job&#39;s status
     *
     * Use this API to retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dispatchingJobStatusTest() throws ApiException {
        String jobId = null;
        DispatchingJobStatusResponse response = api.dispatchingJobStatus()
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Exclude data uploads
     *
     * Use this API to exclude either a specified list of data uploads or all data uploads for each analytic tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void excludeDataUplaodsTest() throws ApiException {
        UploadToExcludeModel model = null;
        TenantDataUploadsUpdateResponseDTO response = api.excludeDataUplaods()
                .model(model)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a dispatching job&#39;s extraction jobs with their statuses
     *
     * Use this API to retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which retrieve data from your source systems through data connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extractionJobAndStatusTest() throws ApiException {
        String dispatchingJobId = null;
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        String jobId = null;
        ExtractionJobAndStatusResponse response = api.extractionJobAndStatus()
                .dispatchingJobId(dispatchingJobId)
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Include data uploads
     *
     * Use this API to include either the specified list of data uploads or all data uploads for each analytic tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void includeDataUploadsTest() throws ApiException {
        UploadToIncludeModel model = null;
        TenantDataUploadsUpdateResponseDTO response = api.includeDataUploads()
                .model(model)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a specific job&#39;s status
     *
     * Use this API to retrieve the list of statuses for a specific job with id &#x60;jobId&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobIdStatusTest() throws ApiException {
        String jobId = null;
        ReceivingJobStatusResponse response = api.jobIdStatus()
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the statuses of all jobs
     *
     * Use this API to retrieve the list of statuses for all jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobStatusTest() throws ApiException {
        String startTime = null;
        String endTime = null;
        String status = null;
        ReceivingJobStatusResponse response = api.jobStatus()
                .startTime(startTime)
                .endTime(endTime)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the latest enabled data versions for all analytic tenants
     *
     * If you discover any inconsistencies after running metric value validation, you may want to find the data versions  causing inconsistencies so you can later disable them.   Use this API to retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a  single specified analytic tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestEnabledDVTest() throws ApiException {
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        Integer numberOfVersions = null;
        MultipleTenantDataVersionsListDTO response = api.latestEnabledDV()
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .numberOfVersions(numberOfVersions)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a dispatching job&#39;s processing jobs with their statuses
     *
     * Use this API to retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which in turn generate processing jobs and receiving jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processingJobAndStatusTest() throws ApiException {
        String dispatchingJobId = null;
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        String jobId = null;
        ProcessingJobAndStatusResponse response = api.processingJobAndStatus()
                .dispatchingJobId(dispatchingJobId)
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve processing job statuses by receiving job ID
     *
     * Use this API to retrieve a list of statuses for all processing jobs associated with the given receiving job ID.  Processing jobs deal with an individual analytic tenant&#39;s data load. A processing job is either triggered through  the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part  of a set from an receiving job, it is associated to the receiving job through a Parent ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processingJobStatusTest() throws ApiException {
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        String receivingJobId = null;
        ProcessingJobStatusResponse response = api.processingJobStatus()
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .receivingJobId(receivingJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a dispatching job&#39;s receiving jobs with their statuses
     *
     * Use this API to retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job  is a \&quot;parent\&quot; to extraction jobs, which in turn generate processing jobs and receiving jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void receivingJobAndStatusTest() throws ApiException {
        String dispatchingJobId = null;
        String tenantCode = null;
        Integer limit = null;
        Integer start = null;
        String jobId = null;
        ReceivingJobAndStatusResponse response = api.receivingJobAndStatus()
                .dispatchingJobId(dispatchingJobId)
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a receiving job&#39;s status
     *
     * After sending data to Visier, you may want to know the status of the receiving job and the associated tenant  receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier&#39;s data  store.   Use this API to retrieve the receiving job status and summary of analytic tenant receiving jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void receivingJobStatusTest() throws ApiException {
        Boolean jobs = null;
        String tenantCode = null;
        Integer start = null;
        Integer limit = null;
        String receivingJobId = null;
        ReceivingJobStatusResponse response = api.receivingJobStatus()
                .jobs(jobs)
                .tenantCode(tenantCode)
                .start(start)
                .limit(limit)
                .receivingJobId(receivingJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve data uploads
     *
     * Use this API to retrieve the data uploads and whether they&#39;re included in one of:  - A list of analytic tenants managed by you.  - A single specified analytic tenant.  - An upload job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveDataUploadsTest() throws ApiException {
        String uploadJobId = null;
        Integer tenantCode = null;
        Integer limit = null;
        Integer start = null;
        Integer numberOfDataUploads = null;
        TenantDataUploadsListResponseDTO response = api.retrieveDataUploads()
                .uploadJobId(uploadJobId)
                .tenantCode(tenantCode)
                .limit(limit)
                .start(start)
                .numberOfDataUploads(numberOfDataUploads)
                .execute();
        // TODO: test validations
    }

    /**
     * Trigger extraction jobs
     *
     * Use this API to generate extraction jobs for a list of analytic tenants or for the administrating tenant.  This API creates a dispatching job that generates one extraction job per tenant. The extraction jobs retrieve  data from your source systems through data connectors. The dispatching job is the \&quot;parent\&quot; of the extraction  jobs and its job ID is returned in the response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startExtractionTest() throws ApiException {
        StartExtractionModel model = null;
        StartExtractionResponse response = api.startExtraction()
                .model(model)
                .execute();
        // TODO: test validations
    }

    /**
     * Start the data load for an analytic tenant
     *
     * This API starts the data load process for all analytic tenants included in the specified data files uploaded  to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the  Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that  spawn for each analytic tenant.   With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status  list of all related processing jobs.   **Prerequisite:** You must first obtain Visier&#39;s public encryption key and upload the source data files to Visier&#39;s  SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.   Visier provides SFTP server credentials and instructions. You can find the encryption key at https://www.visier.com/pgp/visier.public.pgp.asc.  After downloading the file, open the file in a text editor or by dragging it into your browser.   **Note:**   - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.   - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no     more than 5000 tenants are included in a batch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startLoadTest() throws ApiException {
        Map<String, MapValue> model = null;
        DataLoadResponse response = api.startLoad()
                .model(model)
                .execute();
        // TODO: test validations
    }

}
